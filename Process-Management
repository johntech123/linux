sbin: contain system binaries specilly for adminitrator not normal user like user-managment,reboot,shutdown,fdisk,mkfs,ifconfig
bin : system binaries for both root and user like cp mv ls cat echo mkdir
usr : it also contain system binaries which are not essential u have usr/bin ,usr/share:for common storage,usr/src:for storing source code
srv: is for server like webserver related config file we store here


process managment 
process is a running instance of your program like java application ,python or even a shell command is runs as process under the hood

ps -ef or ps aux                 view running process
ps aux | wc -l                   check number of process running     wc: word count -l   its L
diffrence between ps -f and ps aux 
ps -ef shows running process where ps aux show running process alongside the cpu & memory utilisation
top          check running process
htop         same only diffrence it give better vuisualisation colourful output nothing diffrent
top vs ps aux : top gives real time data it changes

kill pid
kill -1  PID        to restart the process                        thses are signals
kill -2  PID        to intrupt the process like ctl c
kill -9 pid
kill -STOP pid      to temporary stop the process      (kill -19 means STOP)
kill -CONT pid      to resume the process              (kill -18 means CONT)
pkill  <process name>             kill by process name
killall 

renice:
renice is a command used to change the priority (or niceness) of a running process. It adjusts the "nice" value of a process, which influences how much CPU time it gets compared to other processes.

ðŸ§  What is "nice"?
The nice value is a number from -20 (highest priority) to 19 (lowest priority).

Default is usually 0.

Lower nice value = higher priority (gets more CPU time).

Higher nice value = lower priority (gets CPU time less aggressively).
-20 is lowest nice value = high cpu time
19 is highest nice value = less cpu time

renice -n 10 -p <pid>      -n number -p process id    less cpu time less priority
renice -n -7 -p <pid>       more priority more cpu time
top                         to check nice value of process in ni column

service processs: which starts at the time of boot when your server goes down   like apache,nginx
systemctl list-units --type=service              This shows all active services.
systemctl | grep -i running                       ye bhi use karskte running svc dekhne k liye
systemctl list-units --type=service --all        List ALL services (active, inactive, enabled, disabled, etc.)
systemctl list-unit-files --type=service         systemctl list-unit-files --type=service

journalctl -u nginx                it is use for checking logs of systemd-services

Type | Started by
Systemd service | Started and managed by systemd | Systemd starts services automatically at boot, or on demand | systemctl (start, stop, enable, etc.) | by defoult runs in background
Regular process | Started manually (e.g., via terminal or script) | Regular processes usually need a user to launch them | 	Commands like ps, kill, nice, top, etc | manually run background

systemd services:
Service name | What it does
ssh.service | Manages the SSH server
cron.service | Manages scheduled tasks
nginx.service | Manages the Nginx web server
networking.service | Manages network interfaces
mysql.service | Runs the MySQL database server

vmstat              to check the current state of linux server memory usage cpu usage overall system :   u know if someone ask about system low performance or slow
vmstat [delay] [count]
vmstat 2 5    in each 2 sec need update and 5 times

#systemd uses systemctl to check the state of the service
systemctl status <service>      
systemctl start/stop/restart <service>
systemctl enable nginx        enable ka matlb ye nai ki service start hojayengi apko start bhi karna honga
systemctl enable --now nginx  it will enable and start both (shortcut for above)
systemctl is-enabled nginx    to check whether service is enabled or not
systemctl disbale nginx       it will not start the service during boot but a person can manually start it
systemctl mask nginx           to prevent service to start  (when you dont want to start it manually)
unmask                        to remove mask


Jobs:
 job generally refers to a process or group of processes that are started and managed from a shell (like bash), typically in the foreground or background of your terminal session.
example : 
1. Foreground Job
A job you start normally (e.g., ./script.sh) runs in the foreground.

It occupies your terminal until it finishes.

2. Background Job
Run a command in the background by appending &:

bash
Copy
Edit
./long_script.sh &
This lets you continue using the terminal.

jobs               it will show active jobs
bg                 to run job in background
fg                 forground
 example:
root# ./hello.sh       run this script which give output in a loop saying hi (ab apan terminal to use nai karskta q ki is job ne terminal ne occupy kardiya is liye isko bg me chalao)
ctl z     to stop it 
then bg         it will run in background now

Q:how to resume specific job with job id in fg or bg
jobs               it will list the jobs including id 
to resume job in fg 
fg %<id>        fg %2     it will resume job
bg %<id>

how do you run job in background withour ctl z 
sleep 10 &      this & sysmbol will run this job in background

q: even if you run job in fg or bg if terminal goes off it will terminate the job 
to have you job running even if terminal closed you have to use nohup

nohup <process> &    nohup ./helo.sh &  

























